/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NumericArrayLib,
  NumericArrayLibInterface,
} from "../NumericArrayLib";

const _abi = [
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bd1a2a16509863a1d2119f2a995e048e3ae9370426cec4b21c1ffadeff37c1e864736f6c63430008090033";

export class NumericArrayLib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NumericArrayLib> {
    return super.deploy(overrides || {}) as Promise<NumericArrayLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NumericArrayLib {
    return super.attach(address) as NumericArrayLib;
  }
  connect(signer: Signer): NumericArrayLib__factory {
    return super.connect(signer) as NumericArrayLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NumericArrayLibInterface {
    return new utils.Interface(_abi) as NumericArrayLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NumericArrayLib {
    return new Contract(address, _abi, signerOrProvider) as NumericArrayLib;
  }
}
