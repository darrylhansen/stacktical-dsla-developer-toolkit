/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CalldataExtractor,
  CalldataExtractorInterface,
} from "../CalldataExtractor";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610395806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806355a547d514610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b600080610055610159565b9050600061006282610207565b61ffff1690508061008657604051632154bfcf60e21b815260040160405180910390fd5b6100916002836102f6565b915060005b818110156101535760006100a984610241565b90506000806100b96068876102f6565b905060006100c7823661030e565b80359350905065ffffffffffff83166100f357604051630336dc9d60e41b815260040160405180910390fd5b87610108578265ffffffffffff169750610130565b878365ffffffffffff16146101305760405163d9d1f46560e01b815260040160405180910390fd5b61013a84886102f6565b965050505050808061014b90610325565b915050610096565b50505090565b60006602ed57011e0000601f193601358116148061018a576040516373bb264f60e11b815260040160405180910390fd5b600036602911156101ae57604051632bcb7bc560e11b815260040160405180910390fd5b50602819360135600060096101c9600362ffffff85166102f6565b6101d391906102f6565b9050366101e16002836102f6565b11156102005760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b6000806102156020846102f6565b90503681111561023857604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b600080600061024f8461027d565b9092509050604e6102618260206102f6565b61026b9084610340565b61027591906102f6565b949350505050565b60008080808061028e6041876102f6565b905060006102a76102a06020846102f6565b36906102d4565b8035945090506102b88160036102d4565b62ffffff9490941697933563ffffffff16965092945050505050565b6000610200828461030e565b634e487b7160e01b600052601160045260246000fd5b60008219821115610309576103096102e0565b500190565b600082821015610320576103206102e0565b500390565b6000600019821415610339576103396102e0565b5060010190565b600081600019048311821515161561035a5761035a6102e0565b50029056fea2646970667358221220c05f93619a7cc977fc8f2f9ca100f4a23887c675253abc133d2851f008db6d4264736f6c63430008090033";

export class CalldataExtractor__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CalldataExtractor> {
    return super.deploy(overrides || {}) as Promise<CalldataExtractor>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CalldataExtractor {
    return super.attach(address) as CalldataExtractor;
  }
  connect(signer: Signer): CalldataExtractor__factory {
    return super.connect(signer) as CalldataExtractor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalldataExtractorInterface {
    return new utils.Interface(_abi) as CalldataExtractorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataExtractor {
    return new Contract(address, _abi, signerOrProvider) as CalldataExtractor;
  }
}
