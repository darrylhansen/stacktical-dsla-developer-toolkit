/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CustomUrlsConsumerBase,
  CustomUrlsConsumerBaseInterface,
} from "../CustomUrlsConsumerBase";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampFromTooLongFuture",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampIsTooOld",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610873806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633ce142f51461006757806355a547d514610091578063b24ebfcc146100a7578063c274583a146100ba578063f50b2efe146100f9578063f90c49241461010e575b600080fd5b61007a6100753660046105ff565b610115565b60405160ff90911681526020015b60405180910390f35b61009961019a565b604051908152602001610088565b6100996100b536600461063e565b6102a9565b604080518082018252601981527f72656473746f6e652d637573746f6d2d75726c732d64656d6f000000000000006020820152905161008891906106fc565b61010c610107366004610751565b6102ba565b005b600261007a565b60007311fffc9970c41b9bfb9aa35be838d39bce918cff6001600160a01b038316141561014457506000919050565b73dbcc2c6c892c8d3e3fe4d325fec810b7376a5ed66001600160a01b038316141561017157506001919050565b6040516303b1166f60e61b81526001600160a01b03831660048201526024015b60405180910390fd5b6000806101a56102c6565b905060006101b282610374565b61ffff169050806101d657604051632154bfcf60e21b815260040160405180910390fd5b6101e1600283610780565b915060005b818110156102a35760006101f9846103ae565b9050600080610209606887610780565b905060006102178236610798565b80359350905065ffffffffffff831661024357604051630336dc9d60e41b815260040160405180910390fd5b87610258578265ffffffffffff169750610280565b878365ffffffffffff16146102805760405163d9d1f46560e01b815260040160405180910390fd5b61028a8488610780565b965050505050808061029b906107af565b9150506101e6565b50505090565b60006102b4826103ea565b92915050565b6102c3816103f5565b50565b60006602ed57011e0000601f19360135811614806102f7576040516373bb264f60e11b815260040160405180910390fd5b6000366029111561031b57604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009610336600362ffffff8516610780565b6103409190610780565b90503661034e600283610780565b111561036d5760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080610382602084610780565b9050368111156103a557604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006103bc84610479565b9092509050604e6103ce826020610780565b6103d890846107ca565b6103e29190610780565b949350505050565b60006102b4826104d0565b60006104036103e8836107ff565b90508042101561044557603c6104194283610798565b11156104415760405163b6b0916d60e01b815260048101829052426024820152604401610191565b5050565b60b46104518242610798565b111561044157604051630321d0b560e01b815260048101829052426024820152604401610191565b60008080808061048a604187610780565b905060006104a361049c602084610780565b3690610599565b8035945090506104b4816003610599565b62ffffff9490941697933563ffffffff16965092945050505050565b60008151600014156104f557604051639e198af960e01b815260040160405180910390fd5b6104fe826105a5565b60006002835161050e91906107ff565b90506002835161051e9190610813565b61057757600061056a84610533600185610798565b8151811061054357610543610827565b602002602001015185848151811061055d5761055d610827565b60200260200101516105f3565b90506103e26002826107ff565b82818151811061058957610589610827565b6020026020010151915050919050565b600061036d8284610798565b8051602082016020820281019150805b828110156105ed57815b818110156105e45781518151808210156105da578084528183525b50506020016105bf565b506020016105b5565b50505050565b600061036d8284610780565b60006020828403121561061157600080fd5b81356001600160a01b038116811461036d57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561065157600080fd5b823567ffffffffffffffff8082111561066957600080fd5b818501915085601f83011261067d57600080fd5b81358181111561068f5761068f610628565b8060051b604051601f19603f830116810181811085821117156106b4576106b4610628565b6040529182528482019250838101850191888311156106d257600080fd5b938501935b828510156106f0578435845293850193928501926106d7565b98975050505050505050565b600060208083528351808285015260005b818110156107295785810183015185820160400152820161070d565b8181111561073b576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561076357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107935761079361076a565b500190565b6000828210156107aa576107aa61076a565b500390565b60006000198214156107c3576107c361076a565b5060010190565b60008160001904831182151516156107e4576107e461076a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261080e5761080e6107e9565b500490565b600082610822576108226107e9565b500690565b634e487b7160e01b600052603260045260246000fdfea264697066735822122063d612ad43dc703d185f2f06842d984f790f7af5585d80271ca85ac324bcd8dd64736f6c63430008090033";

export class CustomUrlsConsumerBase__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CustomUrlsConsumerBase> {
    return super.deploy(overrides || {}) as Promise<CustomUrlsConsumerBase>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CustomUrlsConsumerBase {
    return super.attach(address) as CustomUrlsConsumerBase;
  }
  connect(signer: Signer): CustomUrlsConsumerBase__factory {
    return super.connect(signer) as CustomUrlsConsumerBase__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomUrlsConsumerBaseInterface {
    return new utils.Interface(_abi) as CustomUrlsConsumerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomUrlsConsumerBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CustomUrlsConsumerBase;
  }
}
