/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOracle, MockOracleInterface } from "../MockOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract PeriodRegistry",
        name: "_periodRegistry",
        type: "address",
      },
      {
        internalType: "contract StakeRegistry",
        name: "_stakeRegistry",
        type: "address",
      },
      {
        internalType: "string",
        name: "_lpName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_lpSymbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_spName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_spSymbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "jobId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "JobIdModified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "slaAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "periodId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "chainlinkResponse",
        type: "bytes32",
      },
    ],
    name: "SLIReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestsCounter",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    name: "SLIRequested",
    type: "event",
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_chainlinkResponse",
        type: "uint256",
      },
    ],
    name: "fulfillSLI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fulfillsCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "jobId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "slaId",
        type: "uint128",
      },
    ],
    name: "lpSymbolSlaId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messengerPrecision",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requestIdToSLIRequest",
    outputs: [
      {
        internalType: "address",
        name: "slaAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "periodId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_periodId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_ownerApproval",
        type: "bool",
      },
      {
        internalType: "address",
        name: "_callerAddress",
        type: "address",
      },
    ],
    name: "requestSLI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "requestsCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_slaAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_periodId",
        type: "uint256",
      },
    ],
    name: "retryRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "setChainlinkJobID",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setSLARegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slaRegistryAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spSymbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "slaId",
        type: "uint128",
      },
    ],
    name: "spSymbolSlaId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526008805460ff60a01b191690553480156200001e57600080fd5b5060405162001352380380620013528339810160408190526200004191620002c4565b6200004c33620000e4565b60018055600780546001600160a01b038089166001600160a01b031992831617909255600880549288169290911691909117905583516200009590600990602087019062000134565b508251620000ab90600a90602086019062000134565b508151620000c190600b90602085019062000134565b508051620000d790600c90602084019062000134565b50505050505050620003df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200014290620003a2565b90600052602060002090601f016020900481019282620001665760008555620001b1565b82601f106200018157805160ff1916838001178555620001b1565b82800160010185558215620001b1579182015b82811115620001b157825182559160200191906001019062000194565b50620001bf929150620001c3565b5090565b5b80821115620001bf5760008155600101620001c4565b80516001600160a01b0381168114620001f257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021f57600080fd5b81516001600160401b03808211156200023c576200023c620001f7565b604051601f8301601f19908116603f01168101908282118183101715620002675762000267620001f7565b816040528381526020925086838588010111156200028457600080fd5b600091505b83821015620002a8578582018301518183018401529082019062000289565b83821115620002ba5760008385830101525b9695505050505050565b60008060008060008060c08789031215620002de57600080fd5b620002e987620001da565b9550620002f960208801620001da565b60408801519095506001600160401b03808211156200031757600080fd5b620003258a838b016200020d565b955060608901519150808211156200033c57600080fd5b6200034a8a838b016200020d565b945060808901519150808211156200036157600080fd5b6200036f8a838b016200020d565b935060a08901519150808211156200038657600080fd5b506200039589828a016200020d565b9150509295509295509295565b600181811c90821680620003b757607f821691505b60208210811415620003d957634e487b7160e01b600052602260045260246000fd5b50919050565b610f6380620003ef6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806397a82192116100c3578063cb8d3fcf1161007c578063cb8d3fcf146102a0578063ccb1637c146102b3578063ddca3f4314610291578063e450f061146102bb578063f2fde38b146102ce578063f3881589146102e157600080fd5b806397a8219214610211578063a50c542514610224578063ae401eb91461022c578063bc0bfc001461027e578063c2939d9714610291578063c9b0cb221461029857600080fd5b8063715018a611610115578063715018a6146101ce57806376ff294b146101d65780637dc0d1d0146101de57806381d12c58146101e55780638b6bd736146101f85780638da5cb5b1461020057600080fd5b806311971c4614610152578063292733bf1461017b57806346cd68011461018f578063663c2269146101975780636e71890d146101a9575b600080fd5b610165610160366004610b59565b6102e9565b6040516101729190610bb9565b60405180910390f35b61018d610189366004610bec565b5050565b005b610165610326565b6005545b604051908152602001610172565b6004546001600160a01b03165b6040516001600160a01b039091168152602001610172565b61018d6103b4565b6101656103c8565b60006101b6565b61019b6101f3366004610c0e565b6103d5565b6101656103f6565b6000546001600160a01b03166101b6565b61018d61021f366004610c51565b610403565b60065461019b565b61025f61023a366004610c0e565b600260205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610172565b61018d61028c366004610bec565b610659565b600061019b565b6103e861019b565b6101656102ae366004610b59565b6106b4565b6101656106ca565b61018d6102c9366004610ca0565b6106d7565b61018d6102dc366004610cca565b6108b2565b61018d61092b565b6060600c6102ff836001600160801b03166109a9565b604051602001610310929190610d3c565b6040516020818303038152906040529050919050565b6009805461033390610ce5565b80601f016020809104026020016040519081016040528092919081815260200182805461035f90610ce5565b80156103ac5780601f10610381576101008083540402835291602001916103ac565b820191906000526020600020905b81548152906001019060200180831161038f57829003601f168201915b505050505081565b6103bc610aaf565b6103c66000610b09565b565b600b805461033390610ce5565b600381815481106103e557600080fd5b600091825260209091200154905081565b600c805461033390610ce5565b600854600160a01b900460ff1661047d576004546001600160a01b0316331461047d5760405162461bcd60e51b815260206004820152602160248201527f43616e206f6e6c792062652063616c6c656420627920534c41526567697374726044820152607960f81b60648201526084015b60405180910390fd5b600260015414156104d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610474565b6002600155604080514260208201524491810191909152606082811b6bffffffffffffffffffffffff1916908201526000906103e8906074016040516020818303038152906040528051906020012060001c61052c9190610e09565b90506000858584846040516020016105759493929190938452606092831b6bffffffffffffffffffffffff1990811660208601529190921b166034830152604882015260680190565b6040516020818303038152906040528051906020012090506001600560008282546105a09190610e33565b909155505060055460408051918252602082018390526001600160a01b038516917feab5eb77e722078f3fab7eb6a77c74f7001181e1e3a74d51b7b5747ee1b31cb9910160405180910390a2604051636bd2e21160e11b815260048101839052602481018790526001600160a01b0386169063d7a5c42290604401600060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b5050600180555050505050505050565b600260015414156106ac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610474565b505060018055565b6060600a6102ff836001600160801b03166109a9565b600a805461033390610ce5565b60088054600160a01b60ff60a01b1982161790915560405163ab9a81a560e01b81526001600160a01b038481166004830152602482018490529091169063ab9a81a59060440160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190610e4b565b6107b95760405162461bcd60e51b815260206004820152601b60248201527f5374616b6552656769737472793a206e6f7420766572696669656400000000006044820152606401610474565b6040516320c876ef60e11b81526004810182905282906000906001600160a01b03831690634190edde9060240160606040518083038186803b1580156107fe57600080fd5b505afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190610e68565b9250600091506108439050565b81600281111561085557610855610ea5565b146108925760405162461bcd60e51b815260206004820152600d60248201526c14d3104e881d995c9a599a5959609a1b6044820152606401610474565b61089f8385600033610403565b50506008805460ff60a01b191690555050565b6108ba610aaf565b6001600160a01b03811661091f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610474565b61092881610b09565b50565b6004546001600160a01b0316156109955760405162461bcd60e51b815260206004820152602860248201527f534c41526567697374727920616464726573732068617320616c7265616479206044820152671899595b881cd95d60c21b6064820152608401610474565b600480546001600160a01b03191633179055565b6060816109cd5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156109f757806109e181610ebb565b91506109f09050600a83610ed6565b91506109d1565b60008167ffffffffffffffff811115610a1257610a12610eea565b6040519080825280601f01601f191660200182016040528015610a3c576020820181803683370190505b5090505b8415610aa757610a51600183610f00565b9150610a5e600a86610e09565b610a69906030610e33565b60f81b818381518110610a7e57610a7e610f17565b60200101906001600160f81b031916908160001a905350610aa0600a86610ed6565b9450610a40565b949350505050565b6000546001600160a01b031633146103c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610474565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610b6b57600080fd5b81356001600160801b0381168114610b8257600080fd5b9392505050565b60005b83811015610ba4578181015183820152602001610b8c565b83811115610bb3576000848401525b50505050565b6020815260008251806020840152610bd8816040850160208701610b89565b601f01601f19169190910160400192915050565b60008060408385031215610bff57600080fd5b50508035926020909101359150565b600060208284031215610c2057600080fd5b5035919050565b80356001600160a01b0381168114610c3e57600080fd5b919050565b801515811461092857600080fd5b60008060008060808587031215610c6757600080fd5b84359350610c7760208601610c27565b92506040850135610c8781610c43565b9150610c9560608601610c27565b905092959194509250565b60008060408385031215610cb357600080fd5b610cbc83610c27565b946020939093013593505050565b600060208284031215610cdc57600080fd5b610b8282610c27565b600181811c90821680610cf957607f821691505b60208210811415610d1a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151610d32818560208601610b89565b9290920192915050565b600080845481600182811c915080831680610d5857607f831692505b6020808410821415610d7857634e487b7160e01b86526022600452602486fd5b818015610d8c5760018114610d9d57610dca565b60ff19861689528489019650610dca565b60008b81526020902060005b86811015610dc25781548b820152908501908301610da9565b505084890196505b505050505050610dea610de482602d60f81b815260010190565b85610d20565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600082610e1857610e18610df3565b500690565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4657610e46610e1d565b500190565b600060208284031215610e5d57600080fd5b8151610b8281610c43565b600080600060608486031215610e7d57600080fd5b8351925060208401519150604084015160038110610e9a57600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b6000600019821415610ecf57610ecf610e1d565b5060010190565b600082610ee557610ee5610df3565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610f1257610f12610e1d565b500390565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fef4909045e5e36e3248be644939685a0553021584b7a95d1be651ce45785a9e64736f6c63430008090033";

export class MockOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _periodRegistry: string,
    _stakeRegistry: string,
    _lpName: string,
    _lpSymbol: string,
    _spName: string,
    _spSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockOracle> {
    return super.deploy(
      _periodRegistry,
      _stakeRegistry,
      _lpName,
      _lpSymbol,
      _spName,
      _spSymbol,
      overrides || {}
    ) as Promise<MockOracle>;
  }
  getDeployTransaction(
    _periodRegistry: string,
    _stakeRegistry: string,
    _lpName: string,
    _lpSymbol: string,
    _spName: string,
    _spSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _periodRegistry,
      _stakeRegistry,
      _lpName,
      _lpSymbol,
      _spName,
      _spSymbol,
      overrides || {}
    );
  }
  attach(address: string): MockOracle {
    return super.attach(address) as MockOracle;
  }
  connect(signer: Signer): MockOracle__factory {
    return super.connect(signer) as MockOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOracleInterface {
    return new utils.Interface(_abi) as MockOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOracle {
    return new Contract(address, _abi, signerOrProvider) as MockOracle;
  }
}
